Microsoft (R) Macro Assembler Version 14.12.25835.0	    02/16/18 16:09:48
Assignment 2		(Ass2-Q1.asm			     Page 1 - 1


				Comment !
				Project		: Assignment 2
				Author		: Jason Choquette
				Student ID	: 104 337 378
				Date		: 02/16/18
				!

				TITLE	Assignment 2		(Ass2-Q1.asm) 
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000  00000032 [		Vector						sdword 50 dup (?)	
	    00000000
	   ]
 000000C8  00000033 [		buffer						byte   51 dup(0)	; extra null character
	    00
	   ]
 000000FB 00000000		vectorSize					dword  0			; test for negative value
 000000FF 00000000		sumOfNegatives				dword  0 
 00000103 00000000		evenNumbersCount			dword  0
 00000107 00000000		valueI						dword  0
 0000010B 00000000		valueJ						dword  0
 0000010F 00000000		currentVectoreIndex			dword  0
 00000113 08			tempNumAsString				byte   8
 00000114 08			tempNumAsString2			byte   8
 00000115 30 00			bZero						byte  "0", 0
 00000117 00000000		min							sdword 0
 0000011B 00000000		hi							sdword ?
 0000011F 00000000		lo							sdword ?
				; INPUT
 00000123 57 68 61 74 20	getVectorSize				byte "What is the size N of Vector? >", 0
	   69 73 20 74 68
	   65 20 73 69 7A
	   65 20 4E 20 6F
	   66 20 56 65 63
	   74 6F 72 3F 20
	   3E 00
 00000143 57 68 61 74 20	getVectorContents1			byte "What are the ", 0
	   61 72 65 20 74
	   68 65 20 00
 00000151 20 76 61 6C 75	getVectorContents2			byte " values in Vector? >", 0
	   65 73 20 69 6E
	   20 56 65 63 74
	   6F 72 3F 20 3E
	   00
 00000166 50 6C 65 61 73	getValuesIAndJ				byte "Please give me two values I and J such that 1 <= I <= J <= N >", 0
	   65 20 67 69 76
	   65 20 6D 65 20
	   74 77 6F 20 76
	   61 6C 75 65 73
	   20 49 20 61 6E
	   64 20 4A 20 73
	   75 63 68 20 74
	   68 61 74 20 31
	   20 3C 3D 20 49
	   20 3C 3D 20 4A
	   20 3C 3D 20 4E
	   20 3E 00
 000001A5 52 65 70 65 61	displayRepeatMessage		byte "Repeat with a new Vector of different sizer and/or content? >", 0
	   74 20 77 69 74
	   68 20 61 20 6E
	   65 77 20 56 65
	   63 74 6F 72 20
	   6F 66 20 64 69
	   66 66 65 72 65
	   6E 74 20 73 69
	   7A 65 72 20 61
	   6E 64 2F 6F 72
	   20 63 6F 6E 74
	   65 6E 74 3F 20
	   3E 00
 000001E3 52 65 70 65 61	workWithMe					byte "Repeat with a new Vector of different sizer and/or content? >", 0
	   74 20 77 69 74
	   68 20 61 20 6E
	   65 77 20 56 65
	   63 74 6F 72 20
	   6F 66 20 64 69
	   66 66 65 72 65
	   6E 74 20 73 69
	   7A 65 72 20 61
	   6E 64 2F 6F 72
	   20 63 6F 6E 74
	   65 6E 74 3F 20
	   3E 00

				; OUTPUT
 00000221 56 65 63 74 6F	displayVectorEquals			byte "Vector = ", 0
	   72 20 3D 20 00
 0000022B 53 69 7A 65 20	displayVectorSize			byte "Size of Vector N = ", 0
	   6F 66 20 56 65
	   63 74 6F 72 20
	   4E 20 3D 20 00
 0000023F 53 69 7A 65 20	displayInvalidVectorSize	byte "Size must be positive or zero.", 0
	   6D 75 73 74 20
	   62 65 20 70 6F
	   73 69 74 69 76
	   65 20 6F 72 20
	   7A 65 72 6F 2E
	   00
 0000025E 54 68 65 20 73	displaySumOfNegatives		byte "The sum of all the negative values in Vector is: Sum = ", 0
	   75 6D 20 6F 66
	   20 61 6C 6C 20
	   74 68 65 20 6E
	   65 67 61 74 69
	   76 65 20 76 61
	   6C 75 65 73 20
	   69 6E 20 56 65
	   63 74 6F 72 20
	   69 73 3A 20 53
	   75 6D 20 3D 20
	   00
 00000296 54 68 65 20 6E	displayNumberOfPositives	byte "The number of all positive values in Vector is: Count = ", 0
	   75 6D 62 65 72
	   20 6F 66 20 61
	   6C 6C 20 70 6F
	   73 69 74 69 76
	   65 20 76 61 6C
	   75 65 73 20 69
	   6E 20 56 65 63
	   74 6F 72 20 69
	   73 3A 20 43 6F
	   75 6E 74 20 3D
	   20 00
 000002CF 49 20 3D 20 00	displayI					byte "I = ", 0
 000002D4 20 61 6E 64 20	displayJ					byte " and J = ", 0
	   4A 20 3D 20 00
 000002DE 2C 20 61 6E 64	displayAnd					byte ", and", 0
	   00
 000002E4 49 6E 76 61 6C	displayInvalidIandJResults	byte "Invalid I or J", 0
	   69 64 20 49 20
	   6F 72 20 4A 00
 000002F3 56 65 63 74 6F	displayIsPalindromeResult	byte "Vector is a palindrome because it reads the same way in both directions.", 0
	   72 20 69 73 20
	   61 20 70 61 6C
	   69 6E 64 72 6F
	   6D 65 20 62 65
	   63 61 75 73 65
	   20 69 74 20 72
	   65 61 64 73 20
	   74 68 65 20 73
	   61 6D 65 20 77
	   61 79 20 69 6E
	   20 62 6F 74 68
	   20 64 69 72 65
	   63 74 69 6F 6E
	   73 2E 00
 0000033C 56 65 63 74 6F	displayNotPalindromeResult	byte "Vector is not a palindrome.", 0
	   72 20 69 73 20
	   6E 6F 74 20 61
	   20 70 61 6C 69
	   6E 64 72 6F 6D
	   65 2E 00
 00000358 54 68 65 20 6D	minPositionBetweenI			byte "The minimum value between position ", 0
	   69 6E 69 6D 75
	   6D 20 76 61 6C
	   75 65 20 62 65
	   74 77 65 65 6E
	   20 70 6F 73 69
	   74 69 6F 6E 20
	   00
 0000037C 20 61 6E 64 20	minPostitionBetweenJ		byte " and position ",0
	   70 6F 73 69 74
	   69 6F 6E 20 00
 0000038B 20 69 73 3A 20	ofVector					byte " is: Minimum = ",0
	   4D 69 6E 69 6D
	   75 6D 20 3D 20
	   00
 0000039B 54 68 65 20 6D	minValue					byte "The minimum value is 0",0 
	   69 6E 69 6D 75
	   6D 20 76 61 6C
	   75 65 20 69 73
	   20 30 00
 000003B2 20 49 6E 76 61	invalidOption				byte " Invalid Option. Press 'y' or'Y to continue. Press 'n' or 'N' to quit.", 0
	   6C 69 64 20 4F
	   70 74 69 6F 6E
	   2E 20 50 72 65
	   73 73 20 27 79
	   27 20 6F 72 27
	   59 20 74 6F 20
	   63 6F 6E 74 69
	   6E 75 65 2E 20
	   50 72 65 73 73
	   20 27 6E 27 20
	   6F 72 20 27 4E
	   27 20 74 6F 20
	   71 75 69 74 2E
	   00

 00000000			.code
 00000000			main PROC


 00000000				getVectorSizeLoop:
 00000000  E8 00000000 E		call Crlf
 00000005  E8 00000000 E		call Crlf
 0000000A  BA 00000123 R			mov edx, offset getVectorSize
 0000000F  E8 00000000 E			call WriteString
 00000014  E8 00000000 E			call ReadInt
 00000019  A3 000000FB R			mov vectorSize, eax
 0000001E  83 3D 000000FB R			cmp vectorSize, 0
	   00
 00000025  74 0D				je zeroVector
 00000027  83 F8 00				cmp eax, 0
 0000002A  74 08				je zeroVector
 0000002C  0F 8F 00000089			jg getVectorContents_
 00000032  EB 6E				jmp vectorSizeError

 00000034				zeroVector:				
 00000034  E8 00000000 E			call Crlf
 00000039  BA 000002F3 R			mov edx, offset displayIsPalindromeResult
 0000003E  E8 00000000 E			Call WriteString
 00000043  E8 00000000 E			call Crlf
 00000048  E8 00000000 E			call Crlf
 0000004D  BA 0000025E R			mov edx, offset displaySumOfNegatives
 00000052  E8 00000000 E			call WriteString		
 00000057  BA 00000115 R			mov edx, offset bZero
 0000005C  E8 00000000 E			call WriteString
 00000061  E8 00000000 E			call Crlf
 00000066  E8 00000000 E			call Crlf
 0000006B  BA 00000296 R			mov edx, offset displayNumberOfPositives
 00000070  E8 00000000 E			call WriteString				
 00000075  BA 00000115 R			mov edx, offset bZero
 0000007A  E8 00000000 E			call WriteString
 0000007F  E8 00000000 E			call Crlf
 00000084  E8 00000000 E			call Crlf
 00000089  BA 0000039B R			mov edx, offset minValue
 0000008E  E8 00000000 E			call WriteString
 00000093  E8 00000000 E			call Crlf
 00000098  E8 00000000 E			call Crlf
 0000009D  E9 0000039F				jmp newVector
					
 000000A2				vectorSizeError:
 000000A2  BA 0000023F R			mov edx, offset displayInvalidVectorSize
 000000A7  E8 00000000 E			call WriteString
 000000AC  E8 00000000 E			call Crlf
 000000B1  B8 00000000				mov eax, 0
 000000B6  E9 FFFFFF45				jmp getVectorSizeLoop


 000000BB				getVectorContents_:
						; display message "What are the # values in Vector? "
 000000BB  BA 00000143 R			mov edx, offset getVectorContents1
 000000C0  E8 00000000 E			call WriteString
 000000C5  A1 000000FB R			mov eax, vectorSize
 000000CA  E8 00000000 E			call WriteDec
 000000CF  BA 00000151 R			mov edx, offset getVectorContents2
 000000D4  E8 00000000 E			call WriteString
						
						
 000000D9  BA 000000C8 R			mov edx, offset buffer			
 000000DE  BE 000000C8 R			mov esi, offset buffer ; pointer to the buffer	
 000000E3  B9 00000034				mov ecx, sizeof buffer + 1
						; read in the values as a string to be parsed
 000000E8  E8 00000000 E			call ReadString	; string of numbers is now in buffer


 000000ED  BA 00000000				mov edx, 0
						; should only be called if first byte of string or a space character
						; has been encountered elsewhere
 000000F2					continue:
 000000F2  E8 0000001B					call getNextByte
 000000F7  E8 00000000 E				call IsDigit ; no sign
 000000FC  74 51					jz StateC
 000000FE  3C 2B					cmp al, 43
 00000100  74 2B					je addPlusSign
 00000102  3C 2D					cmp al, 45
 00000104  74 30					je addMinusSign			
 00000106  3C 0A					cmp al, 10		; null-termination
 00000108  0F 84 00000085				je displayStuff
 0000010E  3C 20					cmp al, 32		; ascii space
 00000110  EB E0					jmp continue	
							

 00000112					getNextByte:
 00000112  8A 06					mov al, [esi]
 00000114  46						inc esi
 00000115  C3						ret

 00000116					StateA:			
 00000116  E8 FFFFFFF7					call getNextByte	; loop until a space is encountered. 
 0000011B  E8 00000000 E				call IsDigit		
 00000120  74 F4					jz   StateA			; if digit, continue looping. Eat up the number.
 00000122  75 CE					jnz  continue		; if not a digit must be a space. continue


 00000124					isPositiveNumber:
 00000124  83 05 00000103 R				add evenNumbersCount, 1
	   01
 0000012B  EB C5			jmp continue


 0000012D					addPlusSign:
 0000012D  88 82 00000113 R				mov tempNumAsString[edx], al
 00000133  42						inc edx
 00000134  EB 09					jmp StateB

 00000136					addMinusSign:
 00000136  88 82 00000113 R				mov tempNumAsString[edx], al
 0000013C  42						inc edx
 0000013D  EB 00					jmp StateB

						
 0000013F					StateB:
 0000013F  E8 FFFFFFCE					call getNextByte
 00000144  E8 00000000 E				call IsDigit
 00000149  74 04					jz   StateC
 0000014B  75 0B					jnz  convertToInt
 0000014D  EB A3					jmp  continue
						
 0000014F					StateC:
 0000014F  88 82 00000113 R				mov tempNumAsString[edx], al	; store the digit in temp variable to
							; be parsed in convert_to_int label
 00000155  42						inc edx
 00000156  EB E7					jmp StateB			; could still have more digits to add to temp
							

 00000158					convertToInt:
 00000158  C6 82 00000113 R				mov tempNumAsString[edx], 58
	   3A
 0000015F  BA 00000113 R				mov edx, offset tempNumAsString
 00000164  E8 00000000 E				call ParseInteger32			
							
							; store in vector
 00000169  8B 1D 0000010F R				mov ebx, currentVectoreIndex
 0000016F  89 83 00000000 R				mov Vector[ebx], eax
 00000175  83 C3 04					add ebx, 4
 00000178  89 1D 0000010F R				mov currentVectoreIndex, ebx
 0000017E  BA 00000000					mov edx, 0	
 00000183  83 F8 00					cmp eax, 0
 00000186  7F 9C					jg isPositiveNumber
 00000188  01 05 000000FF R				add sumOfNegatives, eax	
 0000018E  E9 FFFFFF5F					jmp continue

					
 00000193				displayStuff:
						; display message "Size of Vector N = "
 00000193  BA 0000022B R			mov edx, offset displayVectorSize
 00000198  E8 00000000 E			call WriteString
 0000019D  A1 000000FB R			mov eax, vectorSize
 000001A2  E8 00000000 E			call WriteDec
 000001A7  E8 00000000 E			call Crlf
 000001AC  E8 00000000 E			call Crlf

						; display the contents of the buffer (Vector)
 000001B1  BA 00000221 R			mov edx, offset displayVectorEquals
 000001B6  E8 00000000 E			call WriteString
 000001BB  BA 000000C8 R			mov edx, offset buffer
 000001C0  E8 00000000 E			call WriteString
 000001C5  E8 00000000 E			call Crlf
 000001CA  E8 00000000 E			call Crlf
						

 000001CF  BA 0000025E R			mov edx, offset displaySumOfNegatives
 000001D4  E8 00000000 E			Call WriteString
						
 000001D9  A1 000000FF R			mov eax, sumOfNegatives
 000001DE  E8 00000000 E			call WriteInt
 000001E3  E8 00000000 E			call Crlf
 000001E8  BA 00000296 R			mov edx, offset displayNumberOfPositives
 000001ED  E8 00000000 E			call WriteString
 000001F2  A1 00000103 R			mov eax, evenNumbersCount
 000001F7  E8 00000000 E			call WriteDec
 000001FC  E8 00000000 E			call Crlf


						; BEGIN I and J values ------------------------------------------------
 00000201					getIandJ:
 00000201  E8 00000000 E				call Crlf
 00000206  E8 00000000 E				call Crlf
 0000020B  BA 00000166 R				mov edx, offset getValuesIAndJ
 00000210  E8 00000000 E				call WriteString
						

						; 1 <= I <= J <= N ... n = vectorSize
 00000215  BA 000000C8 R			mov edx, offset buffer
						
 0000021A  B8 00000000				mov eax, 0
 0000021F  BB 00000000				mov ebx, 0
						
 00000224  E8 00000000 E			call ReadString
 00000229  E8 00000000 E			call Crlf		

 0000022E  BE 000000C8 R			mov esi, offset buffer
 00000233  B9 00000034				mov ecx, sizeof buffer+1
 00000238  8A 06				mov al, [esi]
 0000023A  E8 00000000 E			call ParseInteger32		
 0000023F  A3 00000107 R			mov valueI, eax	
 00000244  33 C0				xor eax, eax		
 00000246  46					inc esi
 00000247					spa:
 00000247  E8 FFFFFEC6					call getNextByte
 0000024C  E8 00000000 E				call IsDigit
 00000251  3C 00					cmp al, 0		; null-termination
 00000253  74 0F					jz goo
 00000255  75 04					jnz addToBuff			
 00000257  3C 14					cmp al, 20			
 00000259  75 EC					jnz spa		
							
							
 0000025B					addTobuff:
 0000025B  88 83 00000114 R				mov tempNumAsString2[ebx], al	; store the digit in temp variable to
 00000261  43						inc ebx			
 00000262  EB E3					jmp spa

 00000264					goo:
 00000264  C6 83 00000114 R				mov tempNumAsString2[ebx], 58
	   3A
 0000026B  BA 00000114 R				mov edx, offset tempNumAsString2
 00000270  E8 00000000 E				call ParseInteger32					
 00000275  A3 0000010B R				mov valueJ, eax



 0000027A  A1 00000107 R			mov eax, valueI		; EAX = I
 0000027F  83 F8 01				cmp eax, 1			; Compare I to 1 
 00000282  72 29				jb displayError		; jb: jump if I below 1 
 00000284  3B 05 0000010B R			cmp eax, valueJ		; Compare I to J
 0000028A  77 21				ja displayError		; ja: jump if J above I


 0000028C  A1 0000010B R			mov eax, valueJ		; EAX = J
 00000291  83 F8 01				cmp eax, 1			; Compare J to 1 
 00000294  72 17				jb  displayError	; jb: jump if J below 1
								
						
 00000296  A1 000000FB R			mov eax, vectorSize	; EAX = Size of Vector
 0000029B  3B 05 0000010B R			cmp eax, valueJ		; Compare Size of Vector to J
 000002A1  72 0A				jb displayError		; jb: jump if Size of Vector below J
 000002A3  3B 05 00000107 R			cmp eax, valueI		; Compare Size of Vector to I
 000002A9  72 02				jb displayError		; jb: jump if Size of Vector below I
 000002AB  EB 14				jmp showIandJ
						
 000002AD					displayError:
 000002AD  BA 000002E4 R				mov edx, offset displayInvalidIandJResults
 000002B2  E8 00000000 E				call WriteString
 000002B7  E8 00000000 E				call Crlf
 000002BC  E9 FFFFFF40					jmp getIandJ
						

 000002C1					showIandJ:
 000002C1  BA 000002CF R			mov edx, offset displayI
 000002C6  E8 00000000 E			call WriteString
 000002CB  A1 00000107 R			mov eax, valueI
 000002D0  E8 00000000 E			call WriteDec
 000002D5  BA 000002D4 R			mov edx, offset displayJ
 000002DA  E8 00000000 E			call WriteString
 000002DF  A1 0000010B R			mov eax, valueJ
 000002E4  E8 00000000 E			call WriteDec
 000002E9  BA 000002DE R			mov edx, offset displayAnd
 000002EE  E8 00000000 E			call WriteString
 000002F3  E8 00000000 E			call Crlf


 000002F8  BA 00000358 R			mov edx, offset minPositionBetweenI
 000002FD  E8 00000000 E			call WriteString
 00000302  A1 00000107 R			mov eax, valueI
 00000307  E8 00000000 E			call WriteDec
 0000030C  BA 0000037C R			mov edx, offset minPostitionBetweenJ
 00000311  E8 00000000 E			call WriteString
 00000316  A1 0000010B R			mov eax, valueJ
 0000031B  E8 00000000 E			call WriteDec
 00000320  BA 0000038B R			mov edx, offset ofVector
 00000325  E8 00000000 E			call WriteString

						; END I and J values ------------------------------------------------


						; BEGIN find minimum
 0000032A					findMinimum:

						;-----------------------------------------
						;mov eax, 0
						;mov ebx, 0
						;mov ecx, 0
						;mov esi, 0
						
 0000032A  8B 35 00000107 R			mov esi, valueI
 00000330  4E					dec esi
 00000331  8B C6				mov eax, esi
 00000333  BB 00000004				mov ebx, 4
 00000338  F7 E3				mul ebx
 0000033A  8B F0				mov esi, eax
 0000033C  A1 0000010B R			mov eax, valueJ
						
						
 00000341  A1 00000107 R			mov eax, valueI
 00000346  29 05 0000010B R			sub valueJ, eax
 0000034C  8B 0D 0000010B R			mov ecx, valueJ						;initialize loop counter
						;dec ecx								; zero indexed

						
 00000352  8B BE 00000000 R			mov edi, sdword ptr [Vector+esi]	;EDI = starting address of Vector based on I 
 00000358  8B C7				mov eax, edi
 0000035A  A3 00000117 R			mov min, eax						; set intial min value as first element to check
						
 0000035F					mini:				
 0000035F  83 F9 00					cmp ecx, 0
 00000362  74 1F					je stuff
 00000364  83 C6 04					add esi, 4			
 00000367  8B BE 00000000 R				mov edi, sdword ptr [Vector+esi]	;EDI = address of Vector
 0000036D  8B C7					mov eax, edi
 0000036F  39 05 00000117 R				cmp min, eax
 00000375  7F 04					jg condition1				
 00000377  E2 E6				loop mini

 00000379  EB 08					jmp stuff

 0000037B						condition1:				
 0000037B  A3 00000117 R					mov min, eax		
 00000380  49							dec ecx
 00000381  EB DC						jmp mini

 00000383					stuff:
						; ----------------------------------------			
 00000383  A1 00000117 R				mov eax, min
 00000388  E8 00000000 E				call WriteInt
 0000038D  E8 00000000 E				call Crlf
 00000392  EB 00					jmp beginPalindrome

							

							

						; END find minimum
						
						;---------Good below -------------
 00000394					beginPalindrome:

						; BEGIN Palindrome check

 00000394  8B 0D 000000FB R			mov ecx, vectorSize		
 0000039A  FF 0D 000000FB R			dec vectorSize
 000003A0  A1 000000FB R			mov eax, vectorSize
 000003A5  BB 00000004				mov ebx, 4
 000003AA  F7 E3				mul ebx		
 000003AC  A3 0000011B R			mov hi, eax
 000003B1  8B 15 0000011B R			mov edx, hi

 000003B7  C7 05 0000011F R			mov lo, 0
	   00000000
 000003C1  A1 0000011F R			mov eax, lo
 000003C6  8B B0 00000000 R			mov esi, sdword ptr [Vector+eax]		;EDI = starting address of Vector based on I 
 000003CC  8B BA 00000000 R			mov edi, sdword ptr [Vector+edx]	;EDI = starting address of Vector based on I 

						
 000003D2					pal:
 000003D2  8B C6					mov eax, esi
 000003D4  8B DF					mov ebx, edi
 000003D6  3B C3					cmp eax, ebx
 000003D8  75 47					jnz displayNotPal
 000003DA  83 05 0000011F R				add lo, 4
	   04
 000003E1  A1 0000011F R				mov eax, lo
 000003E6  83 2D 0000011B R				sub hi, 4
	   04
 000003ED  8B 15 0000011B R				mov edx, hi
							
 000003F3  8B B0 00000000 R				mov esi, sdword ptr [Vector+eax]	;EDI = starting address of Vector based on I 
 000003F9  8B BA 00000000 R				mov edi, sdword ptr [Vector+edx]	;EDI = starting address of Vector based on I 
							
 000003FF  E2 D1				loop pal


 00000401					displayPal:
 00000401  E8 00000000 E				call Crlf
 00000406  BA 000002F3 R				mov edx, offset displayIsPalindromeResult
 0000040B  E8 00000000 E				call WriteString
 00000410  E8 00000000 E				call Crlf
 00000415  E8 00000000 E				call Crlf
 0000041A  E8 00000000 E				call Crlf
 0000041F  EB 20					jmp newVector

 00000421					displayNotPal:
 00000421  E8 00000000 E				call Crlf
 00000426  BA 0000033C R				mov edx, offset displayNotPalindromeResult
 0000042B  E8 00000000 E				call WriteString
 00000430  E8 00000000 E				call Crlf
 00000435  E8 00000000 E				call Crlf
 0000043A  E8 00000000 E				call Crlf
 0000043F  EB 00					jmp newVector						


 00000441					newVector:			
 00000441  C7 05 000000FF R				mov sumOfNegatives, 0 
	   00000000
 0000044B  C7 05 00000103 R				mov evenNumbersCount,  0
	   00000000
 00000455  C7 05 00000117 R				mov min, 7FFFFFFFh
	   7FFFFFFF
							
							; have to clear everything!!
 0000045F  B9 000000C8					mov ecx, sizeof Vector
 00000464  BF 00000000 R					mov edi, offset Vector
 00000469  BE 7FFFFFFF						mov esi, 7FFFFFFFh
 0000046E							free:
 0000046E  89 37							mov [edi], esi
 00000470  47								inc edi
 00000471  E2 FB						loop free

 00000473  BA 000001A5 R				mov edx, offset displayRepeatMessage
 00000478  E8 00000000 E				call WriteString
 0000047D  E8 00000000 E				call ReadChar
 00000482  3C 59					cmp al, 'Y'
 00000484  0F 84 FFFFFB76				je getVectorSizeLoop
 0000048A  3C 79					cmp al, 'y'
 0000048C  0F 84 FFFFFB6E				je getVectorSizeLoop
 00000492  3C 4E					cmp al, 'N'
 00000494  74 13					je jumpToExit
 00000496  3C 6E					cmp al, 'n'
 00000498  74 0F					je jumpToExit
 0000049A  BA 000003B2 R				mov edx, offset invalidOption
 0000049F  E8 00000000 E				call WriteString
 000004A4  E8 00000000 E				call Crlf
							


							
								
								
							;jmp newVector

						;call WaitMsg
 000004A9				jumpToExit:
					exit
 000004A9  6A 00	   *	    push   +000000000h
 000004AB  E8 00000000 E   *	    call   ExitProcess
 000004B0			main ENDP
				END main  
Microsoft (R) Macro Assembler Version 14.12.25835.0	    02/16/18 16:09:48
Assignment 2		(Ass2-Q1.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003F9 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004B0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000004B0 Public STDCALL
  getVectorSizeLoop  . . . . . .	L Near	 00000000 _TEXT	
  zeroVector . . . . . . . . . .	L Near	 00000034 _TEXT	
  vectorSizeError  . . . . . . .	L Near	 000000A2 _TEXT	
  getVectorContents_ . . . . . .	L Near	 000000BB _TEXT	
  continue . . . . . . . . . . .	L Near	 000000F2 _TEXT	
  getNextByte  . . . . . . . . .	L Near	 00000112 _TEXT	
  StateA . . . . . . . . . . . .	L Near	 00000116 _TEXT	
  isPositiveNumber . . . . . . .	L Near	 00000124 _TEXT	
  addPlusSign  . . . . . . . . .	L Near	 0000012D _TEXT	
  addMinusSign . . . . . . . . .	L Near	 00000136 _TEXT	
  StateB . . . . . . . . . . . .	L Near	 0000013F _TEXT	
  StateC . . . . . . . . . . . .	L Near	 0000014F _TEXT	
  convertToInt . . . . . . . . .	L Near	 00000158 _TEXT	
  displayStuff . . . . . . . . .	L Near	 00000193 _TEXT	
  getIandJ . . . . . . . . . . .	L Near	 00000201 _TEXT	
  spa  . . . . . . . . . . . . .	L Near	 00000247 _TEXT	
  addTobuff  . . . . . . . . . .	L Near	 0000025B _TEXT	
  goo  . . . . . . . . . . . . .	L Near	 00000264 _TEXT	
  displayError . . . . . . . . .	L Near	 000002AD _TEXT	
  showIandJ  . . . . . . . . . .	L Near	 000002C1 _TEXT	
  findMinimum  . . . . . . . . .	L Near	 0000032A _TEXT	
  mini . . . . . . . . . . . . .	L Near	 0000035F _TEXT	
  condition1 . . . . . . . . . .	L Near	 0000037B _TEXT	
  stuff  . . . . . . . . . . . .	L Near	 00000383 _TEXT	
  beginPalindrome  . . . . . . .	L Near	 00000394 _TEXT	
  pal  . . . . . . . . . . . . .	L Near	 000003D2 _TEXT	
  displayPal . . . . . . . . . .	L Near	 00000401 _TEXT	
  displayNotPal  . . . . . . . .	L Near	 00000421 _TEXT	
  newVector  . . . . . . . . . .	L Near	 00000441 _TEXT	
  free . . . . . . . . . . . . .	L Near	 0000046E _TEXT	
  jumpToExit . . . . . . . . . .	L Near	 000004A9 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
Vector . . . . . . . . . . . . .	DWord	 00000000 _DATA	
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
bZero  . . . . . . . . . . . . .	Byte	 00000115 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 000000C8 _DATA	
currentVectoreIndex  . . . . . .	DWord	 0000010F _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displayAnd . . . . . . . . . . .	Byte	 000002DE _DATA	
displayInvalidIandJResults . . .	Byte	 000002E4 _DATA	
displayInvalidVectorSize . . . .	Byte	 0000023F _DATA	
displayIsPalindromeResult  . . .	Byte	 000002F3 _DATA	
displayI . . . . . . . . . . . .	Byte	 000002CF _DATA	
displayJ . . . . . . . . . . . .	Byte	 000002D4 _DATA	
displayNotPalindromeResult . . .	Byte	 0000033C _DATA	
displayNumberOfPositives . . . .	Byte	 00000296 _DATA	
displayRepeatMessage . . . . . .	Byte	 000001A5 _DATA	
displaySumOfNegatives  . . . . .	Byte	 0000025E _DATA	
displayVectorEquals  . . . . . .	Byte	 00000221 _DATA	
displayVectorSize  . . . . . . .	Byte	 0000022B _DATA	
evenNumbersCount . . . . . . . .	DWord	 00000103 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
getValuesIAndJ . . . . . . . . .	Byte	 00000166 _DATA	
getVectorContents1 . . . . . . .	Byte	 00000143 _DATA	
getVectorContents2 . . . . . . .	Byte	 00000151 _DATA	
getVectorSize  . . . . . . . . .	Byte	 00000123 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
hi . . . . . . . . . . . . . . .	DWord	 0000011B _DATA	
invalidOption  . . . . . . . . .	Byte	 000003B2 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lo . . . . . . . . . . . . . . .	DWord	 0000011F _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
minPositionBetweenI  . . . . . .	Byte	 00000358 _DATA	
minPostitionBetweenJ . . . . . .	Byte	 0000037C _DATA	
minValue . . . . . . . . . . . .	Byte	 0000039B _DATA	
min  . . . . . . . . . . . . . .	DWord	 00000117 _DATA	
ofVector . . . . . . . . . . . .	Byte	 0000038B _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sumOfNegatives . . . . . . . . .	DWord	 000000FF _DATA	
tempNumAsString2 . . . . . . . .	Byte	 00000114 _DATA	
tempNumAsString  . . . . . . . .	Byte	 00000113 _DATA	
valueI . . . . . . . . . . . . .	DWord	 00000107 _DATA	
valueJ . . . . . . . . . . . . .	DWord	 0000010B _DATA	
vectorSize . . . . . . . . . . .	DWord	 000000FB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
workWithMe . . . . . . . . . . .	Byte	 000001E3 _DATA	
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
