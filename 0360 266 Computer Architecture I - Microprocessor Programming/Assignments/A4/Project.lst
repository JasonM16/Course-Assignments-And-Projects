Microsoft (R) Macro Assembler Version 14.12.25835.0	    02/20/18 10:29:15
Assignment 3		(Ass3.asm			     Page 1 - 1


				Comment !
				Project		: Assignment 3
				Author		: Jason Choquette
				Student ID	: 104 337 378
				Date		: 02/20/18
				!

				TITLE	Assignment 3		(Ass3.asm) 
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000  00000032 [		vector						DWORD  50 dup (?)	
	    00000000
	   ]
 000000C8  00000033 [		buffer						BYTE   51 dup(0)	; extra null character
	    00
	   ]
 000000FB 08			tempNumAsString				BYTE   8
 000000FC 08			tempNumAsString2			BYTE   8
 000000FD 00000000		currentVectoreIndex			DWORD  0
 00000101 00000000		vectorSize					DWORD  0			; test for negative value
 00000105 0001			stackIsEmpty				WORD   1			; stack empty on program start-up
 = 00000001			TRUE						EQU    1
 = 00000000			FALSE						EQU    0
 00000107 00000000		command						DWORD  ?
 0000010B 00000000		CaseTable					DWORD 0
 0000010F  0000029E R									DWORD Command_0
 00000113  00000001									DWORD 1
 00000117  000002DE R									DWORD Command_1
 0000011B  00000002									DWORD 2
 0000011F  00000339 R									DWORD Command_2
 00000123  00000003									DWORD 3
 00000127  0000033F R									DWORD Command_3
 0000012B  FFFFFFFF									DWORD -1
 0000012F  0000033F R									DWORD Command_3


 = 00000004			NumberOfEntries	= 4

				; INPUT
 00000133 57 68 61 74 20	getOperation				BYTE "What do you want to do now? >", 0
	   64 6F 20 79 6F
	   75 20 77 61 6E
	   74 20 74 6F 20
	   64 6F 20 6E 6F
	   77 3F 20 3E 00
 00000151 57 68 61 74 20	getVectorSize				BYTE "What is the size N of Vector? >", 0
	   69 73 20 74 68
	   65 20 73 69 7A
	   65 20 4E 20 6F
	   66 20 56 65 63
	   74 6F 72 3F 20
	   3E 00
 00000171 57 68 61 74 20	getVectorContents1			BYTE "What are the ", 0
	   61 72 65 20 74
	   68 65 20 00
 0000017F 20 76 61 6C 75	getVectorContents2			BYTE " values in Vector? >", 0
	   65 73 20 69 6E
	   20 56 65 63 74
	   6F 72 3F 20 3E
	   00


				; OUTPUT
 00000194 56 65 63 74 6F	displayVectorEquals			BYTE "Vector = ", 0
	   72 20 3D 20 00
 0000019E 56 65 63 74 6F	displayVectorIs				BYTE "Vector is ", 0
	   72 20 69 73 20
	   00
 000001A9 53 74 61 63 6B	displayStackIs				BYTE "Stack is ", 0
	   20 69 73 20 00
 000001B3 53 69 7A 65 20	displayVectorSize			BYTE "Size of Vector N = ", 0
	   6F 66 20 56 65
	   63 74 6F 72 20
	   4E 20 3D 20 00
 000001C7 53 69 7A 65 20	displayInvalidVectorSize	BYTE "Size must be positive.", 0
	   6D 75 73 74 20
	   62 65 20 70 6F
	   73 69 74 69 76
	   65 2E 00
 000001DE 50 6C 65 61 73	displayZeroVector			BYTE "Please enter a Vector size greater than zero", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   56 65 63 74 6F
	   72 20 73 69 7A
	   65 20 67 72 65
	   61 74 65 72 20
	   74 68 61 6E 20
	   7A 65 72 6F 00
 0000020B 53 74 61 63 6B	dispayStackIsEmpty			BYTE "Stack is empty", 0
	   20 69 73 20 65
	   6D 70 74 79 00
 0000021A 53 74 61 63 6B	dispayStackNotEmpty			BYTE "Stack not empty", 0
	   20 6E 6F 74 20
	   65 6D 70 74 79
	   00
 0000022A 62 65 66 6F 72	displayBefore				BYTE "before ", 0
	   65 20 00
 00000232 61 66 74 65 72	displayAfter				BYTE "after ", 0
	   20 00
 00000239 41 72 72 61 79	displayArrayToStack			BYTE "ArrayToStack", 0
	   54 6F 53 74 61
	   63 6B 00
 00000246 53 74 61 63 6B	displayStackToArray			BYTE "StackToArray", 0
	   54 6F 41 72 72
	   61 79 00
 00000253 53 74 61 63 6B	displayStackReverse			BYTE "StackReverse", 0
	   52 65 76 65 72
	   73 65 00
 00000260 49 20 61 6D 20	displayExit					BYTE "I am exiting... Thank you Honey... and Get lost...", 0
	   65 78 69 74 69
	   6E 67 2E 2E 2E
	   20 54 68 61 6E
	   6B 20 79 6F 75
	   20 48 6F 6E 65
	   79 2E 2E 2E 20
	   61 6E 64 20 47
	   65 74 20 6C 6F
	   73 74 2E 2E 2E
	   00
 00000293 20 20 00		space						BYTE "  ", 0

				; Errors
 00000296 50 72 6F 63 65	notImplemented				BYTE "Procedure not implemented" ,0dh,0ah, 0
	   64 75 72 65 20
	   6E 6F 74 20 69
	   6D 70 6C 65 6D
	   65 6E 74 65 64
	   0D 0A 00
 000002B2 49 6E 76 61 6C	invalidOption				BYTE "Invalid Option. Please select from the following: ", 0
	   69 64 20 4F 70
	   74 69 6F 6E 2E
	   20 50 6C 65 61
	   73 65 20 73 65
	   6C 65 63 74 20
	   66 72 6F 6D 20
	   74 68 65 20 66
	   6F 6C 6C 6F 77
	   69 6E 67 3A 20
	   00
 000002E5 45 72 72 6F 72	emptyStack					BYTE "Error - Stack is empty: Cannot perform StackToArray", 0
	   20 2D 20 53 74
	   61 63 6B 20 69
	   73 20 65 6D 70
	   74 79 3A 20 43
	   61 6E 6E 6F 74
	   20 70 65 72 66
	   6F 72 6D 20 53
	   74 61 63 6B 54
	   6F 41 72 72 61
	   79 00


				; Menu
 00000319 20 20 20 30 2E	menuString					BYTE "   0. Create a new Vector.", 0dh,0ah
	   20 43 72 65 61
	   74 65 20 61 20
	   6E 65 77 20 56
	   65 63 74 6F 72
	   2E 0D 0A
 00000335  20 20 20 31 2E								BYTE "   1. Call ArrayToStack procedure.", 0dh,0ah
	   20 43 61 6C 6C
	   20 41 72 72 61
	   79 54 6F 53 74
	   61 63 6B 20 70
	   72 6F 63 65 64
	   75 72 65 2E 0D
	   0A
 00000359  20 20 20 32 2E								BYTE "   2. Call StackToArray procedure.", 0dh,0ah
	   20 43 61 6C 6C
	   20 53 74 61 63
	   6B 54 6F 41 72
	   72 61 79 20 70
	   72 6F 63 65 64
	   75 72 65 2E 0D
	   0A
 0000037D  20 20 20 33 2E								BYTE "   3. Call StackReverse procedure.", 0dh,0ah
	   20 43 61 6C 6C
	   20 53 74 61 63
	   6B 52 65 76 65
	   72 73 65 20 70
	   72 6F 63 65 64
	   75 72 65 2E 0D
	   0A
 000003A1  20 20 2D 31 2E								BYTE "  -1. Exit program.", 0
	   20 45 78 69 74
	   20 70 72 6F 67
	   72 61 6D 2E 00
				; Debug
 000003B5 49 6E 73 69 64	inside						BYTE "Inside ", 0
	   65 20 00

 00000000			.code
 00000000			main PROC
					
 00000000				Menu: 	
 00000000  BA 00000133 R			mov  edx, OFFSET getOperation
 00000005  E8 00000000 E			call WriteString
 0000000A  E8 00000000 E			call ReadInt
 0000000F  BB 0000010B R			mov ebx, OFFSET CaseTable
 00000014  B9 00000004				mov ecx, NumberOfEntries

 00000019					L1:
 00000019  3B 03				cmp eax, [ebx]
						.IF eax == -1
 0000001B  83 F8 FF	   *	    cmp    eax, - 001h
 0000001E  75 02	   *	    jne    @C0001
 00000020  EB 42					jmp toExit
						.ENDIF
 00000022		   *@C0001:
 00000022  75 05				jne L2
 00000024  FF 53 01				call NEAR PTR [ebx+1] ; calls the selected command
						
 00000027  EB 07				jmp invalidOperation

 00000029					L2:
 00000029  83 C3 08				add ebx, 8
 0000002C  E2 EB				loop L1

						; continue until user enters -1
 0000002E  EB D0				jmp  Menu
						

 00000030				invalidOperation:
 00000030  E8 00000000 E			call Crlf
 00000035  E8 00000000 E			call Crlf
 0000003A  BA 000002B2 R			mov  edx, OFFSET invalidOption
 0000003F  E8 00000000 E			call WriteString
 00000044  E8 00000000 E			call Crlf
 00000049  E8 00000000 E			call Crlf				
 0000004E  BA 00000319 R			mov  edx, OFFSET menuString
 00000053  E8 00000000 E			call WriteString
 00000058  E8 00000000 E			call Crlf			
 0000005D  E8 00000000 E			call Crlf
 00000062  EB 9C				jmp  Menu				

						
 00000064				toExit:
 00000064  BA 00000260 R			mov edx, OFFSET displayExit
 00000069  E8 00000000 E			call WriteString
 0000006E  E8 00000000 E			call Crlf	
					exit
 00000073  6A 00	   *	    push   +000000000h
 00000075  E8 00000000 E   *	    call   ExitProcess


 0000007A			main ENDP



 0000007A			GetVectorSizeFromUser PROC 
 0000007A  E8 00000000 E				call Crlf
 0000007F  BA 00000151 R				mov  edx, OFFSET getVectorSize
 00000084  E8 00000000 E				call WriteString
 00000089  E8 00000000 E				call ReadInt
 0000008E  A3 00000101 R				mov  vectorSize, eax
 00000093  83 F8 00					cmp  eax, 0
 00000096  74 03					je   zeroVector			
 00000098  7C 12					jl   vectorSizeError
 0000009A  C3						ret

 0000009B						zeroVector:	
 0000009B  BA 000001DE R					mov  edx, OFFSET displayZeroVector
 000000A0  E8 00000000 E					call WriteString
 000000A5  E8 00000000 E					call Crlf				
 000000AA  EB CE						jmp GetVectorSizeFromUser
					
 000000AC						vectorSizeError:
 000000AC  BA 000001C7 R					mov edx, OFFSET displayInvalidVectorSize
 000000B1  E8 00000000 E					call WriteString
 000000B6  E8 00000000 E					call Crlf			
 000000BB  EB BD						jmp GetVectorSizeFromUser
 000000BD  C3						ret
 000000BE					GetVectorSizeFromUser ENDP
					

 000000BE			GetVectorContents PROC 
					; display message "What are the # values in Vector? "
 000000BE  BA 00000171 R		mov  edx, OFFSET getVectorContents1
 000000C3  E8 00000000 E		call WriteString
 000000C8  A1 00000101 R		mov  eax, vectorSize
 000000CD  E8 00000000 E		call WriteDec
 000000D2  BA 0000017F R		mov  edx, OFFSET getVectorContents2
 000000D7  E8 00000000 E		call WriteString
						
						
 000000DC  BA 000000C8 R		mov  edx, OFFSET buffer			
 000000E1  BE 000000C8 R		mov  esi, OFFSET buffer ; pointer to the buffer	
 000000E6  B9 00000034			mov  ecx, SIZEOF buffer + 1
					; read in the values as a string to be parsed
 000000EB  E8 00000000 E		call ReadString	; string of numbers is now in buffer


 000000F0  BA 00000000			mov  edx, 0
 000000F5  BB 00000000			mov  ebx, 0
					; should only be called if first BYTE of string or a space character
					; has been encountered elsewhere
 000000FA				continue:
 000000FA  E8 00000052				call GetNextBYTE
 000000FF  E8 00000000 E			call IsDigit
 00000104  74 18				jz   stateC
 00000106  3C 0A				cmp  al, 10		; null-termination
 00000108  74 41				je   endOfInput
 0000010A  3C 20				cmp  al, 32		; ascii space
 0000010C  EB EC				jmp  continue		

						
 0000010E				StateB:
 0000010E  E8 0000003E				call GetNextBYTE
 00000113  E8 00000000 E			call IsDigit
 00000118  74 04				jz   StateC
 0000011A  75 0B				jnz  convertToInt
 0000011C  EB DC				jmp  continue
						
 0000011E				StateC:
 0000011E  88 82 000000FB R			mov  tempNumAsString[edx], al	; store the digit in temp variable to
						; be parsed in convert_to_int label
 00000124  42					inc  edx
 00000125  EB E7				jmp  StateB			; could still have more digits to add to temp
							

 00000127				convertToInt:			
 00000127  C6 82 000000FB R			mov  tempNumAsString[edx], 58
	   3A
 0000012E  BA 000000FB R			mov  edx, OFFSET tempNumAsString
 00000133  E8 00000000 E			call ParseInteger32			
							
 00000138  89 83 00000000 R			mov  vector[ebx], eax
 0000013E  83 C3 04				add  ebx, TYPE vector
							
 00000141  BA 00000000				mov  edx, 0	
 00000146  83 F8 00				cmp  eax, 0			
 00000149  EB AF				jmp  continue


 0000014B				endOfInput:				
 0000014B  E8 00000000 E			call Crlf
							
 00000150  C3				ret
 00000151			GetVectorContents ENDP


 00000151			GetNextBYTE PROC 
 00000151  8A 06			mov al, [esi]
 00000153  46				inc esi
 00000154  C3				ret
 00000155			GetNextBYTE ENDP


 00000155			ShowStackState PROC 
					; check if stack is empty...
					; if it is, print dispayStackIsEmpty
					; otherwise, print dispayStackNotEmpty
								
 00000155  66| 83 3D			cmp  stackIsEmpty, TRUE
	   00000105 R 01
 0000015D  74 07			je   stackEmpty		
 0000015F  EB 1A			jmp  stackNotEmpty
 00000161  E8 00000000 E		call Crlf			

 00000166				stackEmpty:				
 00000166  BA 0000020B R			mov  edx, OFFSET dispayStackIsEmpty	
 0000016B  E8 00000000 E			call WriteString
 00000170  E8 00000000 E			call Crlf	
 00000175  E8 00000000 E			call Crlf
 0000017A  C3					ret

 0000017B				stackNotEmpty:				
 0000017B  BA 0000021A R			mov  edx, OFFSET dispayStackNotEmpty
 00000180  E8 00000000 E			call WriteString
 00000185  E8 00000000 E			call Crlf	
 0000018A  E8 00000000 E			call Crlf
 0000018F  C3					ret			
							
 00000190			ShowStackState ENDP
						

 00000190			ArrayToStack PROC ; command1
					;Write a procedure ArrayToStack which copies the N elements of an array,
					; Vector, onto the runtime stack. Vector is an array of unsigned 
					; double-WORD integer. Register ESI should initially contain the OFFSET
					; address of Vector, and register EBX contains N.
 00000190  E8 00000000 E		call Crlf
 00000195  E8 00000000 E		call Crlf
 0000019A  BA 000003B5 R		mov edx, OFFSET inside
 0000019F  E8 00000000 E		call WriteString
 000001A4  BA 00000239 R		mov edx, OFFSET displayArrayToStack
 000001A9  E8 00000000 E		call WriteString
 000001AE  E8 00000000 E		call Crlf
 000001B3  E8 00000000 E		call Crlf
 000001B8  E8 00000000 E		call DumpRegs


 000001BD  55				push ebp					; save base pointer
 000001BE  E8 00000000 E		call DumpRegs
 000001C3  8B EC			mov	 ebp,esp				; base of stack frame
 000001C5  E8 00000000 E		call DumpRegs


 000001CA  66| C7 05			mov  stackIsEmpty, FALSE			; set stack is empty to false
	   00000105 R
	   0000
 000001D3  BE 00000000 R		mov  esi, OFFSET vector
					;mov  ebx, vectorSize
 000001D8  8B 0D 00000101 R		mov  ecx, vectorSize		
						

					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000001DE				pushToStack:
 000001DE  8B 06				mov  eax, [esi]
 000001E0  50					push eax
 000001E1  E8 00000000 E			call DumpRegs
 000001E6  83 C6 04				add  esi, TYPE vector
 000001E9  E2 F3			loop pushToStack
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;call WriteStackFrame
					;call ShowVectorContents
					;mov edx, OFFSET displayBefore
					;call WriteString
					;mov edx, OFFSET ArrayToStack
					;call WriteString	
 000001EB  5D				pop ebp

 000001EC  C3				ret
 000001ED			ArrayToStack ENDP


 000001ED			StackToArray PROC ; command2
					; Write a procedure StackToArray which copies back to Vector the last 
					; N double-WORD elements pushed onto the stack (by procedure ArrayToStack). 
					; Again, EBX contains the number N, and ESI initially contains the 
					; OFFSET address of Vector. StackToArray should not reverse Vector 
					; (that is, the elements should return to their initial positions as 
					; before the execution of ArrayToStack).
					.IF stackIsEmpty == TRUE						
 000001ED  66| 83 3D
	   00000105 R 01   *	    cmp    stackIsEmpty, TRUE
 000001F5  75 14	   *	    jne    @C0003
 000001F7  BA 000002E5 R			mov edx, OFFSET emptyStack
 000001FC  E8 00000000 E			call WriteString
 00000201  E8 00000000 E			call Crlf
 00000206  E8 00000000 E			call Crlf			
					.ENDIF
 0000020B		   *@C0003:
					.IF stackIsEmpty == FALSE		
 0000020B  66| 83 3D
	   00000105 R 00   *	    cmp    stackIsEmpty, FALSE
 00000213  75 00	   *	    jne    @C0005

					.ENDIF
 00000215		   *@C0005:
 00000215  C3				ret
 00000216			StackToArray ENDP


 00000216			StackReverse PROC ;command3 
					; Write a procedure StackReverse which uses the stack to reverse an 
					; array Vector of N unsigned double-WORD integers.
 00000216  C3				ret
 00000217			StackReverse ENDP
								

 00000217			ShowStackContents PROC 
 00000217  BA 000001A9 R		mov edx, OFFSET displayStackIs
 0000021C  E8 00000000 E		call WriteString
 00000221  8B 0D 00000101 R		mov ecx, vectorSize
 00000227  8B C1			mov eax, ecx
 00000229  48				dec eax
 0000022A  BA 00000004			mov edx, 4
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;  NO MUL  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 0000022F  F7 E2			mul edx
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;  NO MUL  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 00000231  A3 000000FD R		mov currentVectoreIndex, eax
 00000236  8B 35 000000FD R		mov esi, currentVectoreIndex
 0000023C  BA 00000293 R		mov edx, OFFSET space		
					;mov ebx, DWORD ptr [Vector+esi]
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; WRONG  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 00000241				show_digit:			
 00000241  8B 86 00000000 R			mov eax, DWORD PTR [vector+esi]
 00000247  E8 00000000 E			call WriteDec		
 0000024C  E8 00000000 E			call WriteString
 00000251  83 EE 04				sub esi, TYPE vector
 00000254  E2 EB			loop show_digit			


					;popOffStack:
					;	pop eax
					;	call WriteDec
					;loop popOffStack
					;call Crlf
 00000256  C3				ret
 00000257			ShowStackContents ENDP		


 00000257			ShowVectorContents PROC 
						
 00000257  8B 0D 00000101 R		mov ecx, vectorSize
 0000025D  BA 00000293 R		mov edx, OFFSET space		
 00000262  BB 00000000 R		mov ebx, OFFSET vector

 00000267				show_digit:			
 00000267  8B 03				mov eax, [ebx]
 00000269  E8 00000000 E			call WriteDec		
 0000026E  E8 00000000 E			call WriteString
 00000273  83 C3 04				add ebx, TYPE vector
 00000276  E2 EF			loop show_digit					
 00000278  C3				ret
 00000279			ShowVectorContents ENDP		


 00000279			ShowVectorSize PROC 
 00000279  A1 00000101 R		mov eax, vectorSize
 0000027E  E8 00000000 E		call WriteDec
 00000283  E8 00000000 E		call Crlf
 00000288  C3				ret
 00000289			ShowVectorSize ENDP
					
					
 00000289			ClearVector PROC 
					; have to clear everything!!
 00000289  B9 000000C8			mov ecx, SIZEOF vector
 0000028E  BF 00000000 R			mov edi, OFFSET vector
 00000293  BE 7FFFFFFF				mov esi, 7FFFFFFFh
 00000298					free:
 00000298  89 37					mov [edi], esi
 0000029A  47						inc edi
 0000029B  E2 FB				loop free
 0000029D  C3				ret
 0000029E			ClearVector ENDP



 0000029E			Command_0 PROC
 0000029E  E8 FFFFFDD7			call GetVectorSizeFromUser		
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  TEST THIS ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 000002A3  83 3D 00000101 R		cmp  vectorSize, 0
	   00
 000002AA  0F 84 FFFFFD50		je   main
 000002B0  E8 FFFFFE09			call GetVectorContents		
 000002B5  BA 000001B3 R		mov  edx, OFFSET displayVectorSize
 000002BA  E8 00000000 E		call WriteString
 000002BF  E8 FFFFFFB5			call ShowVectorSize
 000002C4  BA 00000194 R		mov  edx, OFFSET displayVectorEquals
 000002C9  E8 00000000 E		call WriteString		
 000002CE  E8 FFFFFF84			call ShowVectorContents
 000002D3  E8 00000000 E		call Crlf
 000002D8  E8 FFFFFE78			call ShowStackState
 000002DD  C3				ret
 000002DE			Command_0 ENDP
					

 000002DE			Command_1 PROC
 000002DE  BA 0000019E R		mov  edx, OFFSET displayVectorIs
 000002E3  E8 00000000 E		call WriteString
 000002E8  E8 FFFFFF6A			call ShowVectorContents
 000002ED  BA 0000022A R		mov  edx, OFFSET displayBefore
 000002F2  E8 00000000 E		call WriteString
 000002F7  BA 00000239 R		mov  edx, OFFSET displayArrayToStack
 000002FC  E8 00000000 E		call WriteString
 00000301  E8 00000000 E		call Crlf
 00000306  BA 000001A9 R		mov  edx, OFFSET displayStackIs
					;--------------------------------------------------
 0000030B  E8 00000000 E		call DumpRegs
					;--------------------------------------------------
 00000310  E8 FFFFFE7B			call ArrayToStack
 00000315  E8 FFFFFEFD			call ShowStackContents
 0000031A  BA 00000232 R		mov  edx, OFFSET displayAfter
 0000031F  E8 00000000 E		call WriteString
 00000324  BA 00000239 R		mov  edx, OFFSET displayArrayToStack
 00000329  E8 00000000 E		call WriteString
 0000032E  E8 00000000 E		call Crlf
 00000333  E8 FFFFFE1D			call ShowStackState
 00000338  C3				ret
 00000339			Command_1 ENDP


 00000339			Command_2 PROC		
 00000339  E8 FFFFFEAF			call StackToArray
 0000033E  C3				ret
 0000033F			Command_2 ENDP
						

 0000033F			Command_3 PROC
 0000033F  BA 00000296 R		mov  edx, OFFSET notImplemented
 00000344  E8 00000000 E		call WriteString
 00000349  E8 00000000 E		call Crlf
 0000034E  C3				ret
 0000034F			Command_3 ENDP


				END main  
Microsoft (R) Macro Assembler Version 14.12.25835.0	    02/20/18 10:29:15
Assignment 3		(Ass3.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003BD Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000034F Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayToStack . . . . . . . . . .	P Near	 00000190 _TEXT	Length= 0000005D Public STDCALL
  pushToStack  . . . . . . . . .	L Near	 000001DE _TEXT	
ClearVector  . . . . . . . . . .	P Near	 00000289 _TEXT	Length= 00000015 Public STDCALL
  free . . . . . . . . . . . . .	L Near	 00000298 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Command_0  . . . . . . . . . . .	P Near	 0000029E _TEXT	Length= 00000040 Public STDCALL
Command_1  . . . . . . . . . . .	P Near	 000002DE _TEXT	Length= 0000005B Public STDCALL
Command_2  . . . . . . . . . . .	P Near	 00000339 _TEXT	Length= 00000006 Public STDCALL
Command_3  . . . . . . . . . . .	P Near	 0000033F _TEXT	Length= 00000010 Public STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNextBYTE  . . . . . . . . . .	P Near	 00000151 _TEXT	Length= 00000004 Public STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVectorContents  . . . . . . .	P Near	 000000BE _TEXT	Length= 00000093 Public STDCALL
  continue . . . . . . . . . . .	L Near	 000000FA _TEXT	
  StateB . . . . . . . . . . . .	L Near	 0000010E _TEXT	
  StateC . . . . . . . . . . . .	L Near	 0000011E _TEXT	
  convertToInt . . . . . . . . .	L Near	 00000127 _TEXT	
  endOfInput . . . . . . . . . .	L Near	 0000014B _TEXT	
GetVectorSizeFromUser  . . . . .	P Near	 0000007A _TEXT	Length= 00000044 Public STDCALL
  zeroVector . . . . . . . . . .	L Near	 0000009B _TEXT	
  vectorSizeError  . . . . . . .	L Near	 000000AC _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowStackContents  . . . . . . .	P Near	 00000217 _TEXT	Length= 00000040 Public STDCALL
  show_digit . . . . . . . . . .	L Near	 00000241 _TEXT	
ShowStackState . . . . . . . . .	P Near	 00000155 _TEXT	Length= 0000003B Public STDCALL
  stackEmpty . . . . . . . . . .	L Near	 00000166 _TEXT	
  stackNotEmpty  . . . . . . . .	L Near	 0000017B _TEXT	
ShowVectorContents . . . . . . .	P Near	 00000257 _TEXT	Length= 00000022 Public STDCALL
  show_digit . . . . . . . . . .	L Near	 00000267 _TEXT	
ShowVectorSize . . . . . . . . .	P Near	 00000279 _TEXT	Length= 00000010 Public STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StackReverse . . . . . . . . . .	P Near	 00000216 _TEXT	Length= 00000001 Public STDCALL
StackToArray . . . . . . . . . .	P Near	 000001ED _TEXT	Length= 00000029 Public STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000007A Public STDCALL
  Menu . . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000019 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000029 _TEXT	
  invalidOperation . . . . . . .	L Near	 00000030 _TEXT	
  toExit . . . . . . . . . . . .	L Near	 00000064 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CaseTable  . . . . . . . . . . .	DWord	 0000010B _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NumberOfEntries  . . . . . . . .	Number	 00000004h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 000000C8 _DATA	
command  . . . . . . . . . . . .	DWord	 00000107 _DATA	
currentVectoreIndex  . . . . . .	DWord	 000000FD _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dispayStackIsEmpty . . . . . . .	Byte	 0000020B _DATA	
dispayStackNotEmpty  . . . . . .	Byte	 0000021A _DATA	
displayAfter . . . . . . . . . .	Byte	 00000232 _DATA	
displayArrayToStack  . . . . . .	Byte	 00000239 _DATA	
displayBefore  . . . . . . . . .	Byte	 0000022A _DATA	
displayExit  . . . . . . . . . .	Byte	 00000260 _DATA	
displayInvalidVectorSize . . . .	Byte	 000001C7 _DATA	
displayStackIs . . . . . . . . .	Byte	 000001A9 _DATA	
displayStackReverse  . . . . . .	Byte	 00000253 _DATA	
displayStackToArray  . . . . . .	Byte	 00000246 _DATA	
displayVectorEquals  . . . . . .	Byte	 00000194 _DATA	
displayVectorIs  . . . . . . . .	Byte	 0000019E _DATA	
displayVectorSize  . . . . . . .	Byte	 000001B3 _DATA	
displayZeroVector  . . . . . . .	Byte	 000001DE _DATA	
emptyStack . . . . . . . . . . .	Byte	 000002E5 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
getOperation . . . . . . . . . .	Byte	 00000133 _DATA	
getVectorContents1 . . . . . . .	Byte	 00000171 _DATA	
getVectorContents2 . . . . . . .	Byte	 0000017F _DATA	
getVectorSize  . . . . . . . . .	Byte	 00000151 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
inside . . . . . . . . . . . . .	Byte	 000003B5 _DATA	
invalidOption  . . . . . . . . .	Byte	 000002B2 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
menuString . . . . . . . . . . .	Byte	 00000319 _DATA	
notImplemented . . . . . . . . .	Byte	 00000296 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 00000293 _DATA	
stackIsEmpty . . . . . . . . . .	Word	 00000105 _DATA	
tempNumAsString2 . . . . . . . .	Byte	 000000FC _DATA	
tempNumAsString  . . . . . . . .	Byte	 000000FB _DATA	
vectorSize . . . . . . . . . . .	DWord	 00000101 _DATA	
vector . . . . . . . . . . . . .	DWord	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
