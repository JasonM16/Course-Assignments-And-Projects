Microsoft (R) Macro Assembler Version 14.12.25835.0	    03/02/18 09:13:46
Assignment 3		(Ass3.asm			     Page 1 - 1


				Comment !
				Project		: Assignment 3
				Author		: Jason Choquette
				Student ID	: 104 337 378
				Date		: 02/25/18
				!

				TITLE	Assignment 3		(Ass3.asm) 
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
				; which command did the user select?
 00000000 00000000		command						DWORD ?			

				; 
 00000004  00000032 [		vector						DWORD 50 dup (?)	
	    00000000
	   ]

				; 
 000000CC  00000032 [		internalStack				DWORD 50 dup (?)
	    00000000
	   ]

				; size of the vector.
 00000194 00000000		N							DWORD 0				

				; stack empty on program start-up. TRUE = 1
 00000198 00000001		stackIsEmpty				DWORD  1				

				; build-up string integer from single byte values
				; for the ParseInteger32 command from Irvine library.
 0000019C 00			numToken					BYTE  0				

				; temporary storage fro user input
 0000019D  00000033 [		buffer						BYTE  51 dup(0)		
	    00
	   ]

				; This is a table with offsets of procedures  
				; It is used to execute indirect procedure calls.
 000001D0 00000000		CaseTable					DWORD 0
 000001D4  000000A4 R									DWORD Command_0
 000001D8  00000001									DWORD 1
 000001DC  000000E4 R									DWORD Command_1
 000001E0  00000002									DWORD 2
 000001E4  00000170 R									DWORD Command_2
 000001E8  00000003									DWORD 3
 000001EC  0000021E R									DWORD Command_3	

				; number of entries in the table
 = 00000004			NumberOfEntries				EQU	  4			

				; CONSTANTS
 = 00000001			TRUE						EQU   1
 = 00000000			FALSE						EQU   0		

				; INPUT STRINGS
 000001F0 57 68 61 74 20	getOperation				BYTE "What do you want to do now? >", 0
	   64 6F 20 79 6F
	   75 20 77 61 6E
	   74 20 74 6F 20
	   64 6F 20 6E 6F
	   77 3F 20 3E 00
 0000020E 57 68 61 74 20	getN						BYTE "What is the size N of Vector? >", 0
	   69 73 20 74 68
	   65 20 73 69 7A
	   65 20 4E 20 6F
	   66 20 56 65 63
	   74 6F 72 3F 20
	   3E 00
 0000022E 57 68 61 74 20	getVectorContents1			BYTE "What are the ", 0
	   61 72 65 20 74
	   68 65 20 00
 0000023C 20 76 61 6C 75	getVectorContents2			BYTE " values in Vector? >", 0
	   65 73 20 69 6E
	   20 56 65 63 74
	   6F 72 3F 20 3E
	   00


				; OUTPUT STRINGS
 00000251 56 65 63 74 6F	displayVectorEquals			BYTE "Vector = ", 0
	   72 20 3D 20 00
 0000025B 56 65 63 74 6F	displayVectorIs				BYTE "Vector is ", 0
	   72 20 69 73 20
	   00
 00000266 53 74 61 63 6B	displayStackIs				BYTE "Stack is ", 0
	   20 69 73 20 00
 00000270 53 69 7A 65 20	displayN			        BYTE "Size of Vector N = ", 0
	   6F 66 20 56 65
	   63 74 6F 72 20
	   4E 20 3D 20 00
 00000284 53 69 7A 65 20	displayInvalidN	            BYTE "Size must be positive.", 0
	   6D 75 73 74 20
	   62 65 20 70 6F
	   73 69 74 69 76
	   65 2E 00
 0000029B 50 6C 65 61 73	displayZeroVector			BYTE "Please enter a Vector size greater than zero", 0
	   65 20 65 6E 74
	   65 72 20 61 20
	   56 65 63 74 6F
	   72 20 73 69 7A
	   65 20 67 72 65
	   61 74 65 72 20
	   74 68 61 6E 20
	   7A 65 72 6F 00
 000002C8 53 74 61 63 6B	dispayStackIsEmpty			BYTE "Stack is empty", 0
	   20 69 73 20 65
	   6D 70 74 79 00
 000002D7 53 74 61 63 6B	dispayStackNotEmpty			BYTE "Stack not empty", 0
	   20 6E 6F 74 20
	   65 6D 70 74 79
	   00
 000002E7 62 65 66 6F 72	displayBefore				BYTE "before ", 0
	   65 20 00
 000002EF 61 66 74 65 72	displayAfter				BYTE "after ", 0
	   20 00
 000002F6 41 72 72 61 79	displayArrayToStack			BYTE "ArrayToStack", 0
	   54 6F 53 74 61
	   63 6B 00
 00000303 53 74 61 63 6B	displayStackToArray			BYTE "StackToArray", 0
	   54 6F 41 72 72
	   61 79 00
 00000310 53 74 61 63 6B	displayStackReverse			BYTE "StackReverse", 0
	   52 65 76 65 72
	   73 65 00
 0000031D 49 20 61 6D 20	displayExit					BYTE "I am exiting... Thank you Honey... and Get lost...", 0
	   65 78 69 74 69
	   6E 67 2E 2E 2E
	   20 54 68 61 6E
	   6B 20 79 6F 75
	   20 48 6F 6E 65
	   79 2E 2E 2E 20
	   61 6E 64 20 47
	   65 74 20 6C 6F
	   73 74 2E 2E 2E
	   00
 00000350 20 20 00		space						BYTE "  ", 0

				; ERROR STRINGS
 00000353 49 6E 76 61 6C	invalidOption				BYTE "Invalid Option. Please select from the following: ", 0
	   69 64 20 4F 70
	   74 69 6F 6E 2E
	   20 50 6C 65 61
	   73 65 20 73 65
	   6C 65 63 74 20
	   66 72 6F 6D 20
	   74 68 65 20 66
	   6F 6C 6C 6F 77
	   69 6E 67 3A 20
	   00
 00000386 45 72 72 6F 72	emptyStack					BYTE "Error - Stack is empty: Cannot perform StackToArray", 0
	   20 2D 20 53 74
	   61 63 6B 20 69
	   73 20 65 6D 70
	   74 79 3A 20 43
	   61 6E 6E 6F 74
	   20 70 65 72 66
	   6F 72 6D 20 53
	   74 61 63 6B 54
	   6F 41 72 72 61
	   79 00

				; MENU STRING
 000003BA 20 20 20 30 2E	menuString					BYTE "   0. Create a new Vector.", 0dh,0ah
	   20 43 72 65 61
	   74 65 20 61 20
	   6E 65 77 20 56
	   65 63 74 6F 72
	   2E 0D 0A
 000003D6  20 20 20 31 2E								BYTE "   1. Call ArrayToStack procedure.", 0dh,0ah
	   20 43 61 6C 6C
	   20 41 72 72 61
	   79 54 6F 53 74
	   61 63 6B 20 70
	   72 6F 63 65 64
	   75 72 65 2E 0D
	   0A
 000003FA  20 20 20 32 2E								BYTE "   2. Call StackToArray procedure.", 0dh,0ah
	   20 43 61 6C 6C
	   20 53 74 61 63
	   6B 54 6F 41 72
	   72 61 79 20 70
	   72 6F 63 65 64
	   75 72 65 2E 0D
	   0A
 0000041E  20 20 20 33 2E								BYTE "   3. Call StackReverse procedure.", 0dh,0ah
	   20 43 61 6C 6C
	   20 53 74 61 63
	   6B 52 65 76 65
	   72 73 65 20 70
	   72 6F 63 65 64
	   75 72 65 2E 0D
	   0A
 00000442  20 20 2D 31 2E								BYTE "  -1. Exit program.", 0
	   20 45 78 69 74
	   20 70 72 6F 67
	   72 61 6D 2E 00
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  END .data  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 00000000			.code
				;-----------------------------------------------
 00000000			main PROC

 00000000				Menu: 	
 00000000  BA 000001F0 R			mov  edx, OFFSET getOperation
 00000005  E8 00000000 E			call WriteString		
 0000000A  E8 00000000 E			call ReadInt
 0000000F  E8 00000000 E			call Crlf
 00000014  A3 00000000 R			mov  command, eax
 00000019  BB 000001D0 R			mov  ebx, OFFSET CaseTable
 0000001E  B9 00000004				mov  ecx, NumberOfEntries

 00000023				L1:
						.IF command == -1 
 00000023  83 3D 00000000 R
	   FF		   *	    cmp    command, - 001h
 0000002A  75 04	   *	    jne    @C0001
 0000002C  EB 60					jmp toExit
						.ELSEIF (command < 0 ) || (command > 4)  
 0000002E  EB 14	   *	    jmp    @C0003
 00000030		   *@C0001:
 00000030  83 3D 00000000 R
	   00		   *	    cmp    command, 000h
 00000037  72 09	   *	    jb	@C0005
 00000039  83 3D 00000000 R
	   04		   *	    cmp    command, 004h
 00000040  76 02	   *	    jbe    @C0004
 00000042		   *@C0005:
 00000042  EB 13					jmp invalidOperation	
						.ENDIF				
 00000044		   *@C0004:
 00000044		   *@C0003:
 00000044  A1 00000000 R			mov  eax, command
 00000049  3B 03				cmp  eax, [ebx]		
 0000004B  75 05				jne  L2
 0000004D  FF 53 04				call NEAR PTR [ebx+4] ; calls the selected command	
						; continue until user enters -1
 00000050  EB AE				jmp  Menu	

 00000052				L2:		
 00000052  83 C3 08				add  ebx, 8
 00000055  E2 CC				loop L1			

 00000057				invalidOperation:
 00000057  E8 00000000 E			call Crlf
 0000005C  E8 00000000 E			call Crlf
 00000061  BA 00000353 R			mov  edx, OFFSET invalidOption
 00000066  E8 00000000 E			call WriteString
 0000006B  E8 00000000 E			call Crlf
 00000070  E8 00000000 E			call Crlf				
 00000075  BA 000003BA R			mov  edx, OFFSET menuString
 0000007A  E8 00000000 E			call WriteString
 0000007F  E8 00000000 E			call Crlf			
 00000084  E8 00000000 E			call Crlf
 00000089  E9 FFFFFF72				jmp  Menu		
						
 0000008E				toExit:
 0000008E  BA 0000031D R			mov edx, OFFSET displayExit
 00000093  E8 00000000 E			call WriteString
 00000098  E8 00000000 E			call Crlf	
					exit
 0000009D  6A 00	   *	    push   +000000000h
 0000009F  E8 00000000 E   *	    call   ExitProcess


 000000A4			main ENDP


				; COMMAND PROCEDURES


				;-----------------------------------------------
 000000A4			Command_0 PROC
					
 000000A4  E8 0000021A			call GetNFromUser			
 000000A9  83 3D 00000194 R		cmp  N, 0
	   00
 000000B0  0F 84 FFFFFF4A		je   main
 000000B6  E8 00000264			call GetVectorContents		
 000000BB  BA 00000270 R		mov  edx, OFFSET displayN
 000000C0  E8 00000000 E		call WriteString
 000000C5  E8 00000365			call ShowN
 000000CA  BA 00000251 R		mov  edx, OFFSET displayVectorEquals
 000000CF  E8 00000000 E		call WriteString		
 000000D4  E8 00000334			call ShowVectorContents
 000000D9  E8 00000000 E		call Crlf
 000000DE  E8 000002D3			call ShowStackState
					
 000000E3  C3				ret
 000000E4			Command_0 ENDP
					






				;-----------------------------------------------
 000000E4			Command_1 PROC	

 000000E4  BA 0000025B R		mov  edx, OFFSET displayVectorIs
 000000E9  E8 00000000 E		call WriteString
 000000EE  E8 0000031A			call ShowVectorContents
 000000F3  BA 000002E7 R		mov  edx, OFFSET displayBefore
 000000F8  E8 00000000 E		call WriteString
 000000FD  BA 000002F6 R		mov  edx, OFFSET displayArrayToStack
 00000102  E8 00000000 E		call WriteString
 00000107  E8 00000000 E		call Crlf
 0000010C  BA 00000266 R		mov  edx, OFFSET displayStackIs
 00000111  E8 00000000 E		call WriteString
					
 00000116  E8 00000024			call ArrayToStack
 0000011B  E8 000002CB			call ShowStackContents
 00000120  BA 000002EF R		mov  edx, OFFSET displayAfter
 00000125  E8 00000000 E		call WriteString
 0000012A  BA 000002F6 R		mov  edx, OFFSET displayArrayToStack
 0000012F  E8 00000000 E		call WriteString
 00000134  E8 00000000 E		call Crlf
 00000139  E8 00000278			call ShowStackState
 0000013E  C3				ret
 0000013F			Command_1 ENDP



				;-----------------------------------------------
 0000013F			ArrayToStack PROC  ; command1

 0000013F  BE 00000004 R		mov esi, OFFSET vector	
 00000144  8B 0D 00000194 R		mov ecx, N			

					
 0000014A				pushToStack:
 0000014A  8B 1E				mov  ebx, [esi]
 0000014C  53					push ebx		
 0000014D  83 C6 04				add  esi, TYPE vector
 00000150  E2 F8			loop pushToStack
						
 00000152  C7 05 00000198 R		mov stackIsEmpty, FALSE			; set stack is empty to false
	   00000000
 0000015C  8B 0D 00000194 R		mov ecx, N		
 00000162  BE 000000CC R		mov esi, OFFSET internalStack	

 00000167				popFromStack:
 00000167  5B				pop ebx
 00000168  89 1E			mov [esi], ebx								
 0000016A  83 C6 04			add esi, TYPE internalStack
 0000016D  E2 F8			loop popFromStack

 0000016F  C3				ret 
 00000170			ArrayToStack ENDP




				;-----------------------------------------------
 00000170			Command_2 PROC		
					
 00000170  E8 00000056			call StackToArray
 00000175  BA 00000266 R		mov  edx, OFFSET displayStackIs
 0000017A  E8 00000000 E		call WriteString
 0000017F  E8 00000267			call ShowStackContents
 00000184  BA 000002E7 R		mov  edx, OFFSET displayBefore
 00000189  E8 00000000 E		call WriteString
 0000018E  BA 00000303 R		mov  edx, OFFSET displayStackToArray
 00000193  E8 00000000 E		call WriteString
 00000198  E8 00000000 E		call Crlf

 0000019D  BA 0000025B R		mov  edx, OFFSET displayVectorIs
 000001A2  E8 00000000 E		call WriteString
 000001A7  E8 00000261			call ShowVectorContents
 000001AC  BA 000002EF R		mov  edx, OFFSET displayAfter
 000001B1  E8 00000000 E		call WriteString
 000001B6  BA 00000303 R		mov  edx, OFFSET displayStackToArray
 000001BB  E8 00000000 E		call WriteString
 000001C0  E8 00000000 E		call Crlf
 000001C5  E8 000001EC			call ShowStackState

 000001CA  C3				ret
 000001CB			Command_2 ENDP
						


 000001CB			StackToArray PROC ; command2


					; Write a procedure StackToArray which copies back to Vector the last 
					; N double-WORD elements pushed onto the stack (by procedure ArrayToStack). 
					; Again, EBX contains the number N, and ESI initially contains the 
					; OFFSET address of Vector. StackToArray should not reverse Vector 
					; (that is, the elements should return to their initial positions as 
					; before the execution of ArrayToStack).
					.IF stackIsEmpty == TRUE						
 000001CB  83 3D 00000198 R
	   01		   *	    cmp    stackIsEmpty, TRUE
 000001D2  75 19	   *	    jne    @C0007
 000001D4  BA 00000386 R			mov edx, OFFSET emptyStack
 000001D9  E8 00000000 E			call WriteString
 000001DE  E8 00000000 E			call Crlf
 000001E3  E8 00000000 E			call Crlf	
 000001E8  E9 FFFFFE13				jmp main
					.ENDIF
 000001ED		   *@C0007:
					
 000001ED  BE 000000CC R		mov esi, OFFSET internalStack	
 000001F2  8B 0D 00000194 R		mov ecx, N			

					
 000001F8				pushToStack:
 000001F8  8B 1E				mov  ebx, [esi]
 000001FA  53					push ebx		
 000001FB  83 C6 04				add  esi, TYPE vector
 000001FE  E2 F8			loop pushToStack
						
 00000200  C7 05 00000198 R		mov stackIsEmpty, TRUE			; set stack is empty to false
	   00000001
 0000020A  8B 0D 00000194 R		mov ecx, N		
 00000210  BE 00000004 R		mov esi, OFFSET vector	

 00000215				popFromStack:
 00000215  5B				pop ebx
 00000216  89 1E			mov [esi], ebx								
 00000218  83 C6 04			add esi, TYPE vector
 0000021B  E2 F8			loop popFromStack



					
 0000021D  C3				ret
 0000021E			StackToArray ENDP


				;-----------------------------------------------
 0000021E			Command_3 PROC

 0000021E  C7 05 00000198 R		mov stackIsEmpty, FALSE
	   00000000
 00000228  BA 0000025B R		mov  edx, OFFSET displayVectorIs
 0000022D  E8 00000000 E		call WriteString
 00000232  E8 000001D6			call ShowVectorContents
 00000237  BA 000002E7 R		mov  edx, OFFSET displayBefore
 0000023C  E8 00000000 E		call WriteString
 00000241  BA 00000310 R		mov  edx, OFFSET displayStackReverse
 00000246  E8 00000000 E		call WriteString
 0000024B  E8 00000000 E		call Crlf
 00000250  E8 00000161			call ShowStackState

					
 00000255  E8 0000002E			call StackReverse

 0000025A  BA 0000025B R		mov  edx, OFFSET displayVectorIs
 0000025F  E8 00000000 E		call WriteString
 00000264  E8 000001A4			call ShowVectorContents
 00000269  BA 000002EF R		mov  edx, OFFSET displayAfter
 0000026E  E8 00000000 E		call WriteString
 00000273  BA 00000310 R		mov  edx, OFFSET displayStackReverse
 00000278  E8 00000000 E		call WriteString
 0000027D  E8 00000000 E		call Crlf
 00000282  E8 0000012F			call ShowStackState
					
 00000287  C3				ret
 00000288			Command_3 ENDP




				;-----------------------------------------------
 00000288			StackReverse PROC ;command3 
					; Write a procedure StackReverse which uses the stack to reverse an 
					; array Vector of N unsigned double-WORD integers.


 00000288  BE 00000004 R		mov esi, OFFSET vector	
 0000028D  8B 0D 00000194 R		mov ecx, N			

					
 00000293				pushToStack:
 00000293  8B 1E				mov  ebx, [esi]
 00000295  53					push ebx		
 00000296  83 C6 04				add  esi, TYPE vector
 00000299  E2 F8			loop pushToStack
						
 0000029B  C7 05 00000198 R		mov stackIsEmpty, FALSE			; set stack is empty to false
	   00000000
 000002A5  8B 0D 00000194 R		mov ecx, N		
 000002AB  BE 00000004 R		mov esi, OFFSET vector	

 000002B0				popFromStack:
 000002B0  5B				pop ebx
 000002B1  89 1E			mov [esi], ebx								
 000002B3  83 C6 04			add esi, TYPE vector
 000002B6  E2 F8			loop popFromStack

 000002B8  C7 05 00000198 R		mov stackIsEmpty, TRUE
	   00000001

 000002C2  C3				ret
 000002C3			StackReverse ENDP




				; UTILITY PROCEDURES


				;-----------------------------------------------
 000002C3			GetNFromUser PROC 
				;
				; 
				; 
				; Receives: nothing. 
				; Returns: nothing
				;-----------------------------------------------
 000002C3  E8 00000000 E		call Crlf
 000002C8  BA 0000020E R		mov  edx, OFFSET getN
 000002CD  E8 00000000 E		call WriteString
 000002D2  E8 00000000 E		call ReadInt
 000002D7  A3 00000194 R		mov  N, eax
 000002DC  83 F8 00			cmp  eax, 0
 000002DF  74 08			je   zeroVector			
 000002E1  7C 17			jl   NError
 000002E3  E8 00000024			call MultiplyDWORD	
 000002E8  C3				ret

 000002E9				zeroVector:	
 000002E9  BA 0000029B R			mov  edx, OFFSET displayZeroVector
 000002EE  E8 00000000 E			call WriteString
 000002F3  E8 00000000 E			call Crlf				
 000002F8  EB C9				jmp  GetNFromUser
					
 000002FA				NError:
 000002FA  BA 00000284 R			mov  edx, OFFSET displayInvalidN
 000002FF  E8 00000000 E			call WriteString
 00000304  E8 00000000 E			call Crlf			
 00000309  EB B8				jmp  GetNFromUser
 0000030B  C3				ret
 0000030C			GetNFromUser ENDP
					


				;-----------------------------------------------
 0000030C			MultiplyDWORD PROC
				;
				; 
				; 
				; Receives: nothing. 
				; Returns: nothing
				;-----------------------------------------------
 0000030C  BB 00000000		mov ebx, 0
 00000311  B9 00000004		mov ecx, 4

 00000316				L1:
 00000316  03 1D 00000194 R		add ebx, N
 0000031C  E2 F8			loop L1
 0000031E  C3			ret
 0000031F			MultiplyDWORD ENDP



				;-----------------------------------------------
 0000031F			GetVectorContents PROC 
				;
				; 
				; 
				; Receives: nothing. 
				; Returns: nothing
				;-----------------------------------------------
					; display message "What are the # values in Vector? "
 0000031F  BA 0000022E R		mov  edx, OFFSET getVectorContents1
 00000324  E8 00000000 E		call WriteString
 00000329  A1 00000194 R		mov  eax, N
 0000032E  E8 00000000 E		call WriteDec
 00000333  BA 0000023C R		mov  edx, OFFSET getVectorContents2
 00000338  E8 00000000 E		call WriteString
						
						
 0000033D  BA 0000019D R		mov  edx, OFFSET buffer			
 00000342  BE 0000019D R		mov  esi, OFFSET buffer ; pointer to the buffer	
 00000347  B9 00000034			mov  ecx, SIZEOF buffer + 1
					; read in the values as a string to be parsed
 0000034C  E8 00000000 E		call ReadString	; string of numbers is now in buffer


 00000351  BA 00000000			mov  edx, 0
 00000356  BB 00000000			mov  ebx, 0
					; should only be called if first BYTE of string or a space character
					; has been encountered elsewhere
 0000035B				continue:
 0000035B  E8 00000052				call GetNextBYTE
 00000360  E8 00000000 E			call IsDigit
 00000365  74 18				jz   stateC
 00000367  3C 0A				cmp  al, 10		; null-termination
 00000369  74 41				je   endOfInput
 0000036B  3C 20				cmp  al, 32		; ascii space
 0000036D  EB EC				jmp  continue		
						
 0000036F				stateB:
 0000036F  E8 0000003E				call GetNextBYTE
 00000374  E8 00000000 E			call IsDigit
 00000379  74 04				jz   stateC
 0000037B  75 0B				jnz  convertToInt
 0000037D  EB DC				jmp  continue
						
 0000037F				stateC:
						; store the digit in temp variable to
						; be parsed in convert_to_int label
 0000037F  88 82 0000019C R			mov  numToken[edx], al			
 00000385  42					inc  edx
 00000386  EB E7				jmp  stateB		; could still have more digits to add to temp
							

 00000388				convertToInt:			
 00000388  C6 82 0000019C R			mov  numToken[edx], 58
	   3A
 0000038F  BA 0000019C R			mov  edx, OFFSET numToken
 00000394  E8 00000000 E			call ParseInteger32			
							
 00000399  89 83 00000004 R			mov  vector[ebx], eax
 0000039F  83 C3 04				add  ebx, TYPE vector
							
 000003A2  BA 00000000				mov  edx, 0	
 000003A7  83 F8 00				cmp  eax, 0			
 000003AA  EB AF				jmp  continue

 000003AC				endOfInput:				
 000003AC  E8 00000000 E			call Crlf			
 000003B1  C3				ret
 000003B2			GetVectorContents ENDP



				;-----------------------------------------------
 000003B2			GetNextBYTE PROC 
				;
				; 
				; 
				; Receives: nothing. 
				; Returns: nothing
				;-----------------------------------------------
 000003B2  8A 06			mov al, [esi]
 000003B4  46				inc esi
 000003B5  C3				ret
 000003B6			GetNextBYTE ENDP



				;-----------------------------------------------
 000003B6			ShowStackState PROC 

								
 000003B6  83 3D 00000198 R		cmp  stackIsEmpty, TRUE
	   01
 000003BD  74 02			je   stackEmpty		
 000003BF  EB 15			jmp  stackNotEmpty			

 000003C1				stackEmpty:				
 000003C1  BA 000002C8 R			mov  edx, OFFSET dispayStackIsEmpty	
 000003C6  E8 00000000 E			call WriteString
 000003CB  E8 00000000 E			call Crlf	
 000003D0  E8 00000000 E			call Crlf
 000003D5  C3					ret

 000003D6				stackNotEmpty:				
 000003D6  BA 000002D7 R			mov  edx, OFFSET dispayStackNotEmpty
 000003DB  E8 00000000 E			call WriteString
 000003E0  E8 00000000 E			call Crlf	
 000003E5  E8 00000000 E			call Crlf
 000003EA  C3					ret			
							
 000003EB			ShowStackState ENDP
						









								


				;-----------------------------------------------
 000003EB			ShowStackContents PROC 
				;
				; 
				; 
				; Receives: nothing. 
				; Returns: nothing
				;-----------------------------------------------
 000003EB  BA 00000350 R		mov edx, OFFSET space		
 000003F0  BE 000000CC R		mov esi, OFFSET internalStack
 000003F5  8B 0D 00000194 R		mov ecx, N
 000003FB				show_digit:			
 000003FB  8B 06				mov  eax, [esi]
 000003FD  E8 00000000 E			call WriteDec		
 00000402  E8 00000000 E			call WriteString
 00000407  83 C6 04				add esi, TYPE internalStack
 0000040A  E2 EF			loop show_digit			

 0000040C  C3				ret
 0000040D			ShowStackContents ENDP		



				;-----------------------------------------------
 0000040D			ShowVectorContents PROC 
				;
				; 
				; 
				; Receives: nothing. 
				; Returns: nothing
				;-----------------------------------------------
 0000040D  8B 0D 00000194 R		mov ecx, N
 00000413  BA 00000350 R		mov edx, OFFSET space		
 00000418  BB 00000004 R		mov ebx, OFFSET vector

 0000041D				show_digit:			
 0000041D  8B 03				mov  eax, [ebx]
 0000041F  E8 00000000 E			call WriteDec		
 00000424  E8 00000000 E			call WriteString
 00000429  83 C3 04				add  ebx, TYPE vector
 0000042C  E2 EF			loop show_digit					
 0000042E  C3				ret
 0000042F			ShowVectorContents ENDP		




				;-----------------------------------------------
 0000042F			ShowN PROC 
				;
				; 
				; 
				; Receives: nothing. 
				; Returns: nothing
				;-----------------------------------------------
 0000042F  A1 00000194 R		mov  eax, N
 00000434  E8 00000000 E		call WriteDec
 00000439  E8 00000000 E		call Crlf
 0000043E  C3				ret
 0000043F			ShowN ENDP
					
					

				;-----------------------------------------------
 0000043F			ClearVector PROC 
				;
				; 
				; 
				; Receives: nothing. 
				; Returns: nothing
				;-----------------------------------------------
					; have to clear everything!!
 0000043F  B9 000000C8			mov ecx, SIZEOF vector
 00000444  BF 00000004 R		mov edi, OFFSET vector
 00000449  BE 7FFFFFFF			mov esi, 7FFFFFFFh
 0000044E				free:
 0000044E  89 37				mov [edi], esi
 00000450  47					inc edi
 00000451  E2 FB			loop free
 00000453  C3				ret
 00000454			ClearVector ENDP




				END main  
Microsoft (R) Macro Assembler Version 14.12.25835.0	    03/02/18 09:13:46
Assignment 3		(Ass3.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000456 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000454 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ArrayToStack . . . . . . . . . .	P Near	 0000013F _TEXT	Length= 00000031 Public STDCALL
  pushToStack  . . . . . . . . .	L Near	 0000014A _TEXT	
  popFromStack . . . . . . . . .	L Near	 00000167 _TEXT	
ClearVector  . . . . . . . . . .	P Near	 0000043F _TEXT	Length= 00000015 Public STDCALL
  free . . . . . . . . . . . . .	L Near	 0000044E _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Command_0  . . . . . . . . . . .	P Near	 000000A4 _TEXT	Length= 00000040 Public STDCALL
Command_1  . . . . . . . . . . .	P Near	 000000E4 _TEXT	Length= 0000005B Public STDCALL
Command_2  . . . . . . . . . . .	P Near	 00000170 _TEXT	Length= 0000005B Public STDCALL
Command_3  . . . . . . . . . . .	P Near	 0000021E _TEXT	Length= 0000006A Public STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNFromUser . . . . . . . . . .	P Near	 000002C3 _TEXT	Length= 00000049 Public STDCALL
  zeroVector . . . . . . . . . .	L Near	 000002E9 _TEXT	
  NError . . . . . . . . . . . .	L Near	 000002FA _TEXT	
GetNextBYTE  . . . . . . . . . .	P Near	 000003B2 _TEXT	Length= 00000004 Public STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetVectorContents  . . . . . . .	P Near	 0000031F _TEXT	Length= 00000093 Public STDCALL
  continue . . . . . . . . . . .	L Near	 0000035B _TEXT	
  stateB . . . . . . . . . . . .	L Near	 0000036F _TEXT	
  stateC . . . . . . . . . . . .	L Near	 0000037F _TEXT	
  convertToInt . . . . . . . . .	L Near	 00000388 _TEXT	
  endOfInput . . . . . . . . . .	L Near	 000003AC _TEXT	
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MultiplyDWORD  . . . . . . . . .	P Near	 0000030C _TEXT	Length= 00000013 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 00000316 _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowN  . . . . . . . . . . . . .	P Near	 0000042F _TEXT	Length= 00000010 Public STDCALL
ShowStackContents  . . . . . . .	P Near	 000003EB _TEXT	Length= 00000022 Public STDCALL
  show_digit . . . . . . . . . .	L Near	 000003FB _TEXT	
ShowStackState . . . . . . . . .	P Near	 000003B6 _TEXT	Length= 00000035 Public STDCALL
  stackEmpty . . . . . . . . . .	L Near	 000003C1 _TEXT	
  stackNotEmpty  . . . . . . . .	L Near	 000003D6 _TEXT	
ShowVectorContents . . . . . . .	P Near	 0000040D _TEXT	Length= 00000022 Public STDCALL
  show_digit . . . . . . . . . .	L Near	 0000041D _TEXT	
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StackReverse . . . . . . . . . .	P Near	 00000288 _TEXT	Length= 0000003B Public STDCALL
  pushToStack  . . . . . . . . .	L Near	 00000293 _TEXT	
  popFromStack . . . . . . . . .	L Near	 000002B0 _TEXT	
StackToArray . . . . . . . . . .	P Near	 000001CB _TEXT	Length= 00000053 Public STDCALL
  pushToStack  . . . . . . . . .	L Near	 000001F8 _TEXT	
  popFromStack . . . . . . . . .	L Near	 00000215 _TEXT	
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A4 Public STDCALL
  Menu . . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000023 _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000052 _TEXT	
  invalidOperation . . . . . . .	L Near	 00000057 _TEXT	
  toExit . . . . . . . . . . . .	L Near	 0000008E _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CaseTable  . . . . . . . . . . .	DWord	 000001D0 _DATA	
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NumberOfEntries  . . . . . . . .	Number	 00000004h   
N  . . . . . . . . . . . . . . .	DWord	 00000194 _DATA	
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 0000019D _DATA	
command  . . . . . . . . . . . .	DWord	 00000000 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dispayStackIsEmpty . . . . . . .	Byte	 000002C8 _DATA	
dispayStackNotEmpty  . . . . . .	Byte	 000002D7 _DATA	
displayAfter . . . . . . . . . .	Byte	 000002EF _DATA	
displayArrayToStack  . . . . . .	Byte	 000002F6 _DATA	
displayBefore  . . . . . . . . .	Byte	 000002E7 _DATA	
displayExit  . . . . . . . . . .	Byte	 0000031D _DATA	
displayInvalidN  . . . . . . . .	Byte	 00000284 _DATA	
displayN . . . . . . . . . . . .	Byte	 00000270 _DATA	
displayStackIs . . . . . . . . .	Byte	 00000266 _DATA	
displayStackReverse  . . . . . .	Byte	 00000310 _DATA	
displayStackToArray  . . . . . .	Byte	 00000303 _DATA	
displayVectorEquals  . . . . . .	Byte	 00000251 _DATA	
displayVectorIs  . . . . . . . .	Byte	 0000025B _DATA	
displayZeroVector  . . . . . . .	Byte	 0000029B _DATA	
emptyStack . . . . . . . . . . .	Byte	 00000386 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
getN . . . . . . . . . . . . . .	Byte	 0000020E _DATA	
getOperation . . . . . . . . . .	Byte	 000001F0 _DATA	
getVectorContents1 . . . . . . .	Byte	 0000022E _DATA	
getVectorContents2 . . . . . . .	Byte	 0000023C _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
internalStack  . . . . . . . . .	DWord	 000000CC _DATA	
invalidOption  . . . . . . . . .	Byte	 00000353 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
menuString . . . . . . . . . . .	Byte	 000003BA _DATA	
numToken . . . . . . . . . . . .	Byte	 0000019C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
space  . . . . . . . . . . . . .	Byte	 00000350 _DATA	
stackIsEmpty . . . . . . . . . .	DWord	 00000198 _DATA	
vector . . . . . . . . . . . . .	DWord	 00000004 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
